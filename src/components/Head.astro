---
/**
 * Head component's props.
 */
export interface Props {
  title: string;
  /**
   * The path of the page. Should start and end with `/`.
   */
  path: '/' | `/${string}/`;

  /**
   * The type of the content. Default is `website`.
   *
   * @see https://ogp.me/#types
   */
  type?: string;
  /**
   * The character set of the document. Default is `utf-8`.
   */
  charset?: string;

  /**
   * The language of the document.
   */
  lang?: string;

  description?: string;
  image?: `http${string}`;

  /**
   * The name of the website.
   */
  siteName?: string;

  /**
   * The author's name of the document.
   */
  author?: string;
  /**
   * Twitter username, like `@zfben`.
   */
  twitter?: `@${string}`;

  /**
   * The type of the Twitter card.
   *
   * @default "summary"
   *
   * @see https://developer.x.com/en/docs/twitter-for-websites/cards/overview/abouts-cards
   */
  twitterCard?: "summary" | "summary_large_image" | "app" | "player";

  /**
   * An array of alternate languages.
   *
   * @example
   * ```ts
   * alternates: [
   *   { lang: "en", path: "/en/", default: true },
   *   { lang: "zh", path: "/zh/" },
   * ]
   *
   * // or
   * alternates: [
   *   { lang: "en", path: "/en/", default: "/choose-language/" },
   *   { lang: "zh", path: "/zh/" },
   * ]
   * ```
   */
  alternates?: {
    lang: string;
    path: string;
    default?: boolean | string;
  }[];

  /**
   * [Google Analytics](https://analytics.google.com/) ID, like `G-123456789`.
   */
  ga?: `G-${string}`;

  /**
   * [Clarity](https://clarity.microsoft.com/) ID.
   */
  clarity?: string;

  /**
   * The [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) of the document.
   */
  scp?: string;

  /**
   * [Google AdSense](https://www.google.com/adsense/) ID.
   *
   * Begins with `ca-pub-`.
   */
  adsense?: `ca-pub-${string}`;

  /**
   * Disable SEO advices.
   *
   * @default false
   */
  disableSEO?: boolean;
}

const {
  type = "website",
  charset = "utf-8",
  lang,
  title,
  description,
  image,
  siteName,
  path,
  author,
  twitter,
  twitterCard = "summary",
  alternates,
  ga,
  clarity,
  adsense,
  scp,
  disableSEO,
} = Astro.props;

if (!import.meta.env.SITE)
  throw Error("Please set `site` in your Astro config file.");

if (!path) throw Error("Please provide a `path` prop.");

if (!title) throw Error("Please provide a `title` prop.");

if (!disableSEO && title.length > 60) console.debug("The `title` should be less than 60 characters for better SEO, learn more: https://developers.google.com/search/docs/appearance/title-link");

if (!disableSEO && !description) console.debug("Provide a `description` prop for better SEO.");
else if (!disableSEO && description && description.length < 100) console.debug("The `description` should be at least 100 characters for better SEO, learn more: https://developers.google.com/search/docs/appearance/title-link");

if (!path.startsWith("/")) throw Error("`path` must start with a `/`.");

if (image && !image.startsWith("http"))
  throw Error("`image` must start with `http`.");

if (twitter && !twitter.startsWith("@"))
  throw Error("`twitter` must start with a `@`.");

if (!import.meta.env.PROD) {
  if (ga) console.debug("Google Analytics tracking code will only be generated in production mode.");

  if (clarity) console.debug("Clarity tracking code will only be generated in production mode.");

  if (adsense) console.debug("Google AdSense code will only be generated in production mode.");
}

if (alternates?.length) {
  if (!lang) throw Error("Please provide a `lang` prop when `alternates` is provided.");

  if (!disableSEO && !alternates.find((alternate) => alternate.default))
    console.debug("Please provide a default alternate language.");
}

const url = `${import.meta.env.SITE}${path}`;
---

{import.meta.env.PROD && ga && (<script
  async
  src={`https://www.googletagmanager.com/gtag/js?id=${ga}`}
  is:inline></script>
<script is:inline define:vars={{ga}}>window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag("js",new Date());gtag("config",ga);</script>)}
{import.meta.env.PROD && clarity && (<script
  is:inline define:vars={{clarity}}>(function(c,l,a,r,i,t,y){c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);})(window,document,"clarity","script",clarity);</script>)}
{import.meta.env.PROD && adsense && (<script async src={`https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=${adsense}`} crossorigin="anonymous"></script>)}
<meta charset={charset} />
<meta property="og:type" content={type} />
{lang && <meta property="og:locale" content={lang} />}
<meta name="twitter:card" content={twitterCard} />
{siteName && <meta property="og:site_name" content={siteName} />}
{
  twitter && (
    <>
      <meta name="twitter:site" content={twitter} />
      <meta name="twitter:creator" content={twitter} />
    </>
  )
}
<title>{title}</title>
<meta property="title" content={title} />
<meta property="og:title" content={title} />
<meta name="twitter:title" content={title} />
{
  description && (
    <>
      <meta name="description" content={description} />
      <meta property="og:description" content={description} />
      <meta name="twitter:description" content={description} />
    </>
  )
}
{
  image && (
    <>
      <meta property="image" content={image} />
      <meta property="og:image" content={image} />
      <meta name="twitter:image" content={image} />
    </>
  )
}
<link rel="canonical" href={url} />
<meta property="url" content={url} />
<meta property="og:url" content={url} />
<meta name="twitter:url" content={url} />
{
  author && (
    <>
      <meta name="author" content={author} />
      <meta property="article:author" content={author} />
    </>
  )
}
{
  alternates?.map((alternate) => (
    <>
      <link
        rel="alternate"
        hreflang={alternate.lang}
        href={import.meta.env.SITE + alternate.path}
      />
      <meta property="og:locale:alternate" content={alternate.lang} />
      {alternate.default && <link rel="alternate" href={import.meta.env.SITE + (alternate.default === true ? alternate.path : alternate.default)} hreflang="x-default" />}
    </>
  ))
}
{scp && <meta http-equiv="Content-Security-Policy" content={scp} />}
