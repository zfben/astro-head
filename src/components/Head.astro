---
/**
 * Head component's props.
 */
export interface Props {
  title: string;
  path: string;

  /**
   * The type of the content. Default is `website`.
   *
   * @see https://ogp.me/#types
   */
  type?: string;
  /**
   * The character set of the document. Default is `utf-8`.
   */
  charset?: string;

  description?: string;
  image?: string;

  /**
   * The name of the website.
   */
  siteName?: string;

  /**
   * The author's name of the document.
   */
  author?: string;
  /**
   * Twitter username, like `@zfben`.
   */
  twitter?: string;

  /**
   * An array of alternate languages.
   */
  alternates?: {
    lang: string;
    path: string;
  }[];
}

const {
  type = "website",
  charset = "utf-8",
  title,
  description,
  image,
  siteName,
  path,
  author,
  twitter,
  alternates,
} = Astro.props;

if (!import.meta.env.SITE)
  throw Error("Please set `site` in your Astro config file.");

if (!path) throw Error("Please provide a `path` prop.");

if (!title) throw Error("Please provide a `title` prop.");

if (!path.startsWith("/")) throw Error("`path` must start with a `/`.");

const url = `${import.meta.env.SITE}${path}`;
---

<meta charset={charset} />
<meta property="og:type" content={type} />
<meta name="twitter:card" content="summary" />
{siteName && <meta property="og:site_name" content={siteName} />}
{
  twitter && (
    <>
      <meta name="twitter:site" content={twitter} />
      <meta name="twitter:creator" content={twitter} />
    </>
  )
}
<title>{title}</title>
<meta property="title" content={title} />
<meta property="og:title" content={title} />
<meta name="twitter:title" content={title} />
{
  description && (
    <>
      <meta name="description" content={description} />
      <meta property="og:description" content={description} />
      <meta property="twitter:description" content={description} />
    </>
  )
}
{
  image && (
    <>
      <meta property="image" content={image} />
      <meta property="og:image" content={image} />
      <meta name="twitter:image" content={image} />
    </>
  )
}
<link rel="canonical" href={url} />
<meta property="url" content={url} />
<meta property="og:url" content={url} />
<meta name="twitter:url" content={url} />
{
  author && (
    <>
      <meta name="author" content={author} />
      <meta property="article:author" content={author} />
    </>
  )
}
{
  alternates?.map((alternate) => (
    <link
      rel="alternate"
      hreflang={alternate.lang}
      href={import.meta.env.SITE + alternate.path}
    />
  ))
}
